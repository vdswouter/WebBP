// -------------------------------------------------------------------
// :: DEBUG
// -------------------------------------------------------------------
// Visually detect any improperly nested or potentially
// invalid markup, or any potentially inaccessible code
//
// - Red: definite error
// - Yellow: double-check
// - None: should be fine
//
// Please note that this method of checking markup quality
// should not be relied upon entirely. Validate your markup!
// Adapted from the Inuit.css framework _debug.scss
// Inspired by Chopstick
//
// - https://github.com/csswizardry/inuit.css/blob/master/generic/_debug.scss
// - http://github.com/getchopstick/chopstick-boilerplate

%___debug-info {
	color: black;
	font-family: sans-serif;
	white-space: pre;
	font-size: 11px;
	line-height: 1;
	padding: 0.5em;
	position: absolute;
	right: 0;
	top: 0;
}

@mixin show-debug($info, $color) {
	position: relative;

	&:before {
		content: $info;
    	background: $color;
    	@extend %___debug-info;
	}
}


// -------------------------------------------------------------------
// :: DEBUG CLASSES
// -------------------------------------------------------------------

@if $debug-mode == true {

	// Display vertical rhythm
	// Set separately as we might
	// not need it on every project

	@if $debug-rhythm == true {

		html {
			background-size: $line-height+em $line-height+em;
			background-image: linear-gradient(to bottom,
				rgba(195, 0, 60, 0.4) 0%, transparent 4%, transparent 31%,
				rgba(195, 0, 60, 0.1) 31%, transparent 35%, transparent 64%,
				rgba(195, 0, 60, 0.1) 64%, transparent 68%
			);
		}

	}


    // Are there any empty
    // elements in your page?

    //:empty:not(hr):not(div):not(img):not(input):not(textarea) {
	//	outline: 2px solid yellow;
	//	@include show-debug('Should not be empty', yellow);
	//}


	// Avoid inline styles where possible

	//[style] {
	//	outline:5px solid yellow;
	//	@include show-debug('Inline-styling detected', yellow);
	//}


	// Try to avoid using IDs for CSS
	// Is this doing any styling?

	//[id]:not(input):not(select):not(textarea) {
	//	outline:5px solid yellow;
	//	@include show-debug('Avoid using IDs for styling', yellow);
	//}


	// Images require alt-attributes, empty alt's are
	// fine but should be double-checked, no alt is bad

	img {
		outline: 2px solid red;
	}

	img[alt] {
		outline: none;
	}

	img[alt=""] {
		outline: 2px solid yellow;
	}


	// Links sometimes, though not always, benefit from 'title' attributes
	// Links without are never invalid but it's a good idea to check

	a {
    	outline: 5px solid yellow;
    	@include show-debug('Should have a title-attribute', yellow);
	}

	a[title] {
    	outline:none;
    	&:before { display: none; }
	}


	// Lists can only contain
	// li's as children

	ul,
	ol {
	    > *:not(li){
	        outline: 2px solid red;
	        @include show-debug('Can only contain li-elements', red);
	    }
	}



















/**
 * It's always nice to give 'th's 'scope' attributes.
 */
th{
    outline:5px solid yellow;
}
th[scope]{
    outline:none;
}


/**
 * 'tr's as children of 'table's ain't great, did you need a 'thead'/'tbody'?
 */
table > tr{
    outline:5px solid yellow;
}


/**
 * 'tfoot' needs to come *before* 'tbody'.
 */
tbody + tfoot{
    outline:5px solid yellow;
}


/**
 * Forms require 'action' attributes
 */
form{
    outline:5px solid red;
}
form[action]{
    outline:none;
}


/**
 * Various form-field types have required attributes. 'input's need 'type'
 * attributes, 'textarea's need 'rows' and 'cols' attributes and submit buttons
 * need a 'value' attribute.
 */

input{
    outline:5px solid red;
    @include show-debug('Should have type-attribute', red);
}

textarea {
    outline:5px solid red;
}



input[type]{
    outline:none;
    &:after { display: none; }
}


textarea[rows][cols]{
    outline:none;
}
input[type=submit]{
    outline:5px solid red;
}
input[type=submit][value]{
    outline:none;
}






}

